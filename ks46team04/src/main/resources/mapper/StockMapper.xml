<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="ks46team04.admin.mapper.StockMapper">
	<resultMap type="Stock" id="stockResultMap">
		<id		column="goods_stock_code"				property="goodsStockCode"/>
		<result column="goods_code"						property="goodsCode"/>
		<result column="goods_lot_number"				property="goodsLotNumber"/>
		<result column="current_stock_amount"			property="currentStockAmount"/>
		<result column="stocktaking_check"				property="stocktakingCheck"/>
		<result column="stocktaking_date"				property="stocktakingDate"/>
		<result column="goods_expiry_date"				property="goodsExpiryDate"/>
		<result column="final_stock_amount"				property="finalStockAmount"/>
		<result column="unusual_stock_amount"			property="unusualStockAmount"/>
		<result column="unusual_stock_check"			property="unusualStockCheck"/>
		<association property="goodsInfo" javaType="Goods">
			<id		column="goods_code"				property="goodsCode"/>
			<result column="goods_name"				property="goodsName"/>
			<result column="goods_company"			property="goodsCompany"/>
		</association>
	</resultMap>
	
	<resultMap type="InOutcoming" id="inOutcomingResultMap">
		<id		column="incoming_outcoming_history_code"			property="inOutcomingCode"/>
		<result column="goods_code"									property="goodsCode"/>
		<result column="goods_lot_number"							property="goodsLotNumber"/>
		<result column="incoming_outcoming_quantity"				property="inOutcomingQuantity"/>
		<result column="incoming_outcoming_type"					property="inOutcomingType"/>
		<result column="incoming_outcoming_date"					property="inOutcomingDate"/>
		<result column="incoming_outcoming_reg_id"					property="inOutcomingRegId"/>
		<result column="incoming_outcoming_reg_date"				property="inOutcomingRegDate"/>
		<result column="incoming_outcoming_update_id"				property="inOutcomingUpdId"/>
		<result column="incoming_outcoming_update_date"				property="inOutcomingUpdDate"/>
		<association property="goodsInfo" javaType="Goods">
			<id		column="goods_code"				property="goodsCode"/>
			<result column="goods_name"				property="goodsName"/>
			<result column="goods_company"			property="goodsCompany"/>
		</association>
		<association property="outcomingDetailInfo" javaType="OutcomingDetail">
			<id		column="outcoming_detail_code"						property="outcomingDetailCode"/>
			<result column="incoming_outcoming_history_code"			property="inOutcomingCode"/>
			<result column="outcoming_id"								property="outcomingId"/>
			<result column="foundation_code"							property="foundationCode"/>
		</association>
		<association property="foundationInfo" javaType="Foundation">
			<id		column="foundation_code"				property="foundationCode"/>
			<result column="foundation_name"				property="foundationName"/>
		</association>
	</resultMap>
	
	<resultMap type="OutcomingDetail" id="outcomingDetailResultMap">
		<id		column="outcoming_detail_code"						property="outcomingDetailCode"/>
		<result column="incoming_outcoming_history_code"			property="inOutcomingCode"/>
		<result column="outcoming_goods"							property="outcomingGoods"/>
		<result column="outcoming_quantity"							property="outcomingQuantity"/>
		<result column="outcoming_date"								property="outcomingDate"/>
		<result column="outcoming_id"								property="outcomingId"/>
		<result column="foundation_code"							property="foundationCode"/>
		<result column="outcoming_reg_id"							property="outcomingDetailRegId"/>
		<result column="outcoming_reg_date"							property="outcomingDetailRegDate"/>
		<result column="outcoming_update_id"						property="outcomingDetailUpdId"/>
		<result column="outcoming_update_date"						property="outcomingDetailUpdDate"/>
	</resultMap>
	
	<resultMap type="UnusualStock" id="unusualStockResultMap">
		<id		column="unusual_stock_detail_code"					property="unusualStockCode"/>
		<result column="goods_code"									property="goodsCode"/>
		<result column="goods_stock_code"							property="goodsStockCode"/>
		<result column="unusual_stock_quantity"						property="unusualStockQuantity"/>
		<result column="unusual_stock_date"							property="unusualStockDate"/>
		<result column="unusual_stock_reason"						property="unusualStockReason"/>
		<result column="unusual_stock_reg_id"						property="unusualStockRegId"/>
		<result column="unusual_stock_reg_date"						property="unusualStockRegDate"/>
		<result column="unusual_stock_update_id"					property="unusualStockUpdId"/>
		<result column="unusual_stock_update_date"					property="unusualStockUpdDate"/>
		<association property="stockInfo" javaType="Stock">
			<id		column="goods_stock_code"				property="goodsStockCode"/>
			<result column="goods_lot_number"				property="goodsLotNumber"/>
		</association>
		<association property="goodsInfo" javaType="Goods">
			<id		column="goods_code"				property="goodsCode"/>
			<result column="goods_name"				property="goodsName"/>
		</association>
	</resultMap>	
	
	<update id="modifyUnusualStock" parameterType="UnusualStock">
		/* 상품 비정상재고 수정 */
		UPDATE unusual_stock_detail
		<set>
			<if test="unusualStockQuantity != null and unusualStockQuantity !=''">
				unusual_stock_quantity = #{unusualStockQuantity}
			</if>
			<if test="unusualStockDate != null and unusualStockDate !=''">
				, unusual_stock_date = #{unusualStockDate}
			</if>
			<if test="unusualStockReason != null and unusualStockReason !=''">
				, unusual_stock_reason = #{unusualStockReason}
			</if>
			, unusual_stock_update_id = #{unusualStockUpdId}
			, unusual_stock_update_date = NOW()
		</set>
		WHERE
			unusual_stock_detail_code = #{unusualStockCode};
	</update>
	
	<select id="getUnusualStockInfoByCode" parameterType="String" resultMap="unusualStockResultMap">
		/* 특정 상품 비정상재고 조회 */
		SELECT
			u.unusual_stock_detail_code
			, u.goods_stock_code
			, u.goods_code
			, i.goods_name
			, s.goods_lot_number
			, u.unusual_stock_quantity
			, u.unusual_stock_date
			, u.unusual_stock_reason
			, u.unusual_stock_reg_id
			, u.unusual_stock_reg_date
			, u.unusual_stock_update_id
			, u.unusual_stock_update_date
		FROM
			unusual_stock_detail AS u
		INNER JOIN 
			goods_stock AS s
		ON
			u.goods_stock_code = s.goods_stock_code
		INNER JOIN 
			goods_reg_info AS i
		ON
			u.goods_code = i.goods_code
		WHERE 
			u.unusual_stock_detail_code = #{unusualStockCode};
	</select>	
	
	<update id="modifyUnusualStockCheck" parameterType="map">
		/* 재고 테이블의 비정상재고 유무 업데이트 */
		UPDATE goods_stock
		SET
			unusual_stock_check = #{unusualStockCheck}
		WHERE
			goods_stock_code = #{goodsStockCode};
	</update>
	
	<insert id="addUnusualStock" parameterType="UnusualStock">
		/* 비정상 재고 등록 */
		INSERT INTO unusual_stock_detail
			(unusual_stock_detail_code, goods_code, goods_stock_code, unusual_stock_quantity,
			 unusual_stock_date, unusual_stock_reason, unusual_stock_reg_id, unusual_stock_reg_date)
		VALUES
			(#{unusualStockCode}, #{goodsCode}, #{goodsStockCode}, #{unusualStockQuantity},
			 #{unusualStockDate}, #{unusualStockReason}, #{unusualStockRegId}, NOW());
	</insert>
	
	<delete id="removeUnusualStock" parameterType="map">
		/* 상품 비정상재고 삭제 */
		DELETE 
		FROM 
			unusual_stock_detail
		<where>
			<if test="removeUnusualStockKey != null and removeUnusualStockKey != '' and removeUnusualStockValue != null and removeUnusualStockValue != ''">
				${removeUnusualStockKey} = #{removeUnusualStockValue}
			</if>
		</where> 
	</delete>
	
	<select id="getUnusualStockListBySearch" resultMap="unusualStockResultMap" parameterType="map">
		/* 비정상 재고 검색 결과 조회 */
		SELECT
			u.unusual_stock_detail_code
			, u.goods_stock_code
			, u.goods_code
			, i.goods_name
			, s.goods_lot_number
			, u.unusual_stock_quantity
			, u.unusual_stock_date
			, u.unusual_stock_reason
			, u.unusual_stock_reg_id
			, u.unusual_stock_reg_date
			, u.unusual_stock_update_id
			, u.unusual_stock_update_date
		FROM
			unusual_stock_detail AS u
		INNER JOIN 
			goods_stock AS s
		ON
			u.goods_stock_code = s.goods_stock_code
		INNER JOIN 
			goods_reg_info AS i
		ON
			u.goods_code = i.goods_code
		<where>
			<if test="inputSearchKey != null and inputSearchKey != ''">
				${inputSearchKey} LIKE CONCAT('%', #{inputSearchValue}, '%')
			</if>
			<if test="dateSearchKey != null and dateSearchKey != '' and startDate != null and endDate != null">
		    	<choose>
		    		<when test="dateSearchKey == 'unusualStockDate'">
				        AND u.unusual_stock_date BETWEEN #{startDate} AND #{endDate}
				    </when>
				    <otherwise>
				        AND 
						(
							u.unusual_stock_update_date IS NULL 
							AND  u.unusual_stock_reg_date BETWEEN #{startDate} 
							AND #{endDate}
							OR u.unusual_stock_update_date IS NOT NULL 
							AND u.unusual_stock_update_date BETWEEN #{startDate} AND #{endDate}
						)
				    </otherwise>
		    	</choose>
			</if>
		</where>
		ORDER BY 
			CAST(SUBSTRING_INDEX(u.unusual_stock_detail_code, 'discared_stock', -1) AS UNSIGNED) DESC;
	</select>
	
	<select id="getUnusualStockList" resultMap="unusualStockResultMap">
		/* 비정상 재고 조회 */
		SELECT
			u.unusual_stock_detail_code
			, u.goods_stock_code
			, u.goods_code
			, i.goods_name
			, s.goods_lot_number
			, u.unusual_stock_quantity
			, u.unusual_stock_date
			, u.unusual_stock_reason
			, u.unusual_stock_reg_id
			, u.unusual_stock_reg_date
			, u.unusual_stock_update_id
			, u.unusual_stock_update_date
		FROM
			unusual_stock_detail AS u
		INNER JOIN 
			goods_stock AS s
		ON
			u.goods_stock_code = s.goods_stock_code
		INNER JOIN 
			goods_reg_info AS i
		ON
			u.goods_code = i.goods_code
		ORDER BY 
			CAST(SUBSTRING_INDEX(u.unusual_stock_detail_code, 'discared_stock', -1) AS UNSIGNED) DESC;
	</select>

	<select id="getUnsualStockListByStock" parameterType="String" resultMap="unusualStockResultMap">
		/* 상품재고코드로 비정상재고 조회 */
		SELECT
			u.unusual_stock_detail_code
			, u.goods_stock_code
			, u.goods_code
			, i.goods_name
			, s.goods_lot_number
			, u.unusual_stock_quantity
			, u.unusual_stock_date
			, u.unusual_stock_reason
			, u.unusual_stock_reg_id
			, u.unusual_stock_reg_date
			, u.unusual_stock_update_id
			, u.unusual_stock_update_date
		FROM
			unusual_stock_detail AS u
		INNER JOIN 
			goods_stock AS s
		ON
			u.goods_stock_code = s.goods_stock_code
		INNER JOIN 
			goods_reg_info AS i
		ON
			u.goods_code = i.goods_code
		WHERE
			u.goods_stock_code = #{goodsStockCode}
		ORDER BY 
			CAST(SUBSTRING_INDEX(u.unusual_stock_detail_code, 'discared_stock', -1) AS UNSIGNED) DESC;
	</select>
	
	<update id="modifyStocktaking" parameterType="map">
		/* 상품 재고조사 정보 수정 */
		UPDATE goods_stock
		<set>
            , stocktaking_check = #{stocktakingCheck}
			<if test="goodsExpiryDate != null and goodsExpiryDate !=''">
	            , goods_expiry_date = #{goodsExpiryDate}
			</if>
			<if test="stocktakingDate != null">
			    , stocktaking_date = #{stocktakingDate}
			</if>
			<if test="stocktakingDate == null or stocktakingDate == ''">
			    , stocktaking_date = null
			</if>
		</set>
		WHERE
			goods_stock_code = #{goodsStockCode};
	</update>
	
	<select id="getStockInfoByCode" resultMap="stockResultMap">
		/* 특정 상품 재고 조회 */
		SELECT
			s.goods_stock_code
			, i.goods_name
			, i.goods_company
			, s.goods_code
			, s.goods_lot_number
			, s.current_stock_amount
			, s.stocktaking_check
			, s.stocktaking_date
			, s.goods_expiry_date
			, s.final_stock_amount
			, s.unusual_stock_amount
			, s.unusual_stock_check
		FROM
			goods_stock AS s
		INNER JOIN 
			goods_reg_info AS i
		ON
			s.goods_code = i.goods_code
		WHERE
			goods_stock_code = #{goodsStockCode};
	</select>
	
	<delete id="removeStock" parameterType="map">
		/* 상품 재고 삭제 */
		DELETE 
		FROM 
			goods_stock
		<where>
			<if test="removeStockKey != null and removeStockKey != '' and removeStockValue != null and removeStockValue != ''">
				${removeStockKey} = #{removeStockValue}
			</if>
		</where>  
	</delete>
	
	<select id="removeStockCheck" parameterType="String" resultType="boolean">
		/* 삭제 상품 재고 유무 확인 - 재고 테이블에 삭제될 상품코드의 최종재고량이 모두 0인 경우 true 반환 */
		SELECT
			IF(COUNT(1)=0, 1, 0)
		FROM
			goods_stock
		WHERE 
			goods_code = #{goodsCode} and final_stock_amount != 0;
	</select>
	
	<select id="getStockListBySearch" resultMap="stockResultMap" parameterType="map">
		/* 상품 재고 검색 결과 조회 */
		SELECT
			s.goods_stock_code
			, s.goods_code
			, i.goods_name
			, s.goods_lot_number
			, i.goods_company
			, s.goods_expiry_date
			, s.stocktaking_check
			, s.stocktaking_date
			, s.current_stock_amount
			, s.final_stock_amount
			, s.unusual_stock_amount
			, s.unusual_stock_check
		FROM
			goods_stock AS s
		INNER JOIN 
			goods_reg_info AS i
		ON
			s.goods_code = i.goods_code
		<where>
			<if test="inputSearchKey != null and inputSearchKey != ''">
				${inputSearchKey} LIKE CONCAT('%', #{inputSearchValue}, '%')
			</if>
			<if test="stocktakingKey != null and stocktakingValue != ''">
				AND ${stocktakingKey} = #{stocktakingValue}
			</if>
			<if test="unusualStockKey != null and unusualStockValue != ''">
				AND ${unusualStockKey} = #{unusualStockValue}
			</if>
		    <if test="dateSearchKey != null and dateSearchKey != '' and startDate != null and endDate != null">
				AND ${dateSearchKey} BETWEEN #{startDate} AND #{endDate}
			</if>
		</where>
		ORDER BY 
			CAST(SUBSTRING_INDEX(s.goods_stock_code, 'goods_stock', -1) AS UNSIGNED) DESC;
	</select>
	
	<select id="getStockList" resultMap="stockResultMap">
		/* 상품 재고 조회 */
		SELECT
			s.goods_stock_code
			, s.goods_code
			, i.goods_name
			, s.goods_lot_number
			, i.goods_company
			, s.goods_expiry_date
			, s.stocktaking_check
			, s.stocktaking_date
			, s.current_stock_amount
			, s.final_stock_amount
			, s.unusual_stock_amount
			, s.unusual_stock_check
		FROM
			goods_stock AS s
		INNER JOIN 
			goods_reg_info AS i
		ON
			s.goods_code = i.goods_code
		ORDER BY 
			CAST(SUBSTRING_INDEX(s.goods_stock_code, 'goods_stock', -1) AS UNSIGNED) DESC;
	</select>
	
	<update id="modifyInOutcoming" parameterType="InOutcoming">
		/* 상품 입출고 수정 */
		UPDATE incoming_outcoming_history
		<set>
			<if test="inOutcomingQuantity != null and inOutcomingQuantity !=''">
				incoming_outcoming_quantity = #{inOutcomingQuantity}
			</if>
			<if test="inOutcomingType != null and inOutcomingType !=''">
				, incoming_outcoming_type = #{inOutcomingType}
			</if>
			<if test="inOutcomingDate != null and inOutcomingDate !=''">
				, incoming_outcoming_date = #{inOutcomingDate}
			</if>
			, incoming_outcoming_update_id = #{inOutcomingUpdId}
			, incoming_outcoming_update_date = NOW()
		</set>
		WHERE
			incoming_outcoming_history_code = #{inOutcomingCode};
	</update>
	
	<update id="modifyOutcomingDetail" parameterType="OutcomingDetail">
		/* 상품 출고 상세정보 수정 */
		UPDATE outcoming_detail
		<set>
			<if test="outcomingGoods != null and outcomingGoods !=''">
				outcoming_goods = #{outcomingGoods}
			</if>
			<if test="outcomingQuantity != null and outcomingQuantity !=''">
				, outcoming_quantity = #{outcomingQuantity}
			</if>
			<if test="outcomingDate != null and outcomingDate !=''">
				, outcoming_date = #{outcomingDate}
			</if>
			<if test="outcomingId != null and outcomingId !=''">
				, outcoming_id = #{outcomingId}
			</if>
			<if test="foundationCode != null and foundationCode !=''">
				, foundation_code = #{foundationCode}
			</if>
			, outcoming_update_id = #{outcomingDetailUpdId}
			, outcoming_update_date = NOW()
		</set>
		WHERE
			outcoming_detail_code = #{outcomingDetailCode};
	</update>
	
	<select id="getOutcomingDetailCode" parameterType="String" resultType="String">
		/* 상품 출고 상세정보코드 조회 */
		SELECT
			outcoming_detail_code AS outcomingDetailCode
		FROM 
			outcoming_detail
		WHERE
			incoming_outcoming_history_code = #{inOutcomingCode};
	</select>
	
	<select id="getInOutcomingInfoByCode" resultMap="inOutcomingResultMap">
		/* 특정 상품 입출고 조회 */
		SELECT 
			h.incoming_outcoming_history_code
			, h.goods_code
			, h.goods_lot_number
			, i.goods_name
			, i.goods_company
			, h.incoming_outcoming_quantity
			, h.incoming_outcoming_type
			, h.incoming_outcoming_date
			, o.outcoming_id
			, o.foundation_code
			, f.foundation_name
			, h.incoming_outcoming_reg_id
			, h.incoming_outcoming_reg_date
			, h.incoming_outcoming_update_id
			, h.incoming_outcoming_update_date
		FROM
			incoming_outcoming_history as h
		INNER JOIN 
			goods_reg_info AS i
		ON
			h.goods_code = i.goods_code
		LEFT JOIN
			outcoming_detail AS o
		ON 
			h.incoming_outcoming_history_code = o.incoming_outcoming_history_code
		LEFT JOIN
			foundation_request AS f
		ON
			o.foundation_code = f.foundation_code
		WHERE
			h.incoming_outcoming_history_code = #{inOutcomingCode};
	</select>
	
	<insert id="addOutcomingDetail" parameterType="OutcomingDetail">
		/* 상품 출고 상세정보 등록 */
		INSERT INTO outcoming_detail
			(outcoming_detail_code, incoming_outcoming_history_code, outcoming_goods, outcoming_quantity, outcoming_date, 
			 outcoming_id, foundation_code, outcoming_reg_id, outcoming_reg_date)
		VALUES 
			(#{outcomingDetailCode}, #{inOutcomingCode}, #{outcomingGoods}, #{outcomingQuantity}, #{outcomingDate},
			 #{outcomingId}, #{foundationCode}, #{outcomingDetailRegId}, NOW());
	</insert>
	
	<update id="modifyStockAmount" parameterType="Stock">
		/* 상품 재고수량 수정 */
		UPDATE goods_stock
		<set>
			<if test="currentStockAmount != null or currentStockAmount ==0">
				current_stock_amount = #{currentStockAmount}
			</if>
			<if test="goodsExpiryDate != null and goodsExpiryDate !=''">
				, goods_expiry_date = #{goodsExpiryDate}
			</if>
			<if test="finalStockAmount != null or finalStockAmount ==0">
				, final_stock_amount = #{finalStockAmount}
			</if>
			<if test="unusualStockAmount != null or unusualStockAmount ==0">
				, unusual_stock_amount = #{unusualStockAmount}
			</if>
		</set>
		WHERE
			goods_stock_code = #{goodsStockCode};
	</update>
	
	<select id="getStockInfo" resultMap="stockResultMap">
		/* 등록된 상품 재고 정보 조회 */
		SELECT
			goods_stock_code
			, goods_code
			, goods_lot_number
			, current_stock_amount
			, stocktaking_check
			, stocktaking_date
			, goods_expiry_date
			, final_stock_amount
			, unusual_stock_amount
			, unusual_stock_check
		FROM
			goods_stock
		WHERE
			goods_code = #{goodsCode} and goods_lot_number = #{goodsLotNumber};
	</select>
	
	<insert id="addStock" parameterType="Stock">
		/* 상품 입출고 등록 시 새로운 재고 정보일 경우 재고 등록 */
		INSERT INTO goods_stock
			(goods_stock_code, goods_code, goods_lot_number, current_stock_amount, 
			 goods_expiry_date, final_stock_amount)
		VALUES
			(#{goodsStockCode}, #{goodsCode}, #{goodsLotNumber}, #{currentStockAmount}, 
			#{goodsExpiryDate}, #{finalStockAmount});
	</insert>
	
	<select id="checkNewStockInfo" parameterType="String" resultType="boolean">
		/* 등록된 상품 재고 정보인지 확인 */
		SELECT
			IF(COUNT(1)=0, 1, 0)
		FROM
			goods_stock
		WHERE 
			goods_code = #{goodsCode} and goods_lot_number = #{goodsLotNumber};
	</select>
	
	<insert id="addInOutcoming" parameterType="InOutcoming">
		/* 상품 입출고 등록 */
		INSERT INTO incoming_outcoming_history
			(incoming_outcoming_history_code, goods_code, goods_lot_number, incoming_outcoming_quantity,
			 incoming_outcoming_type, incoming_outcoming_date, incoming_outcoming_reg_id, incoming_outcoming_reg_date)
		VALUES
			(#{inOutcomingCode}, #{goodsCode}, #{goodsLotNumber}, #{inOutcomingQuantity},
			 #{inOutcomingType}, #{inOutcomingDate}, #{inOutcomingRegId}, NOW());
	</insert>
	
	<select id="getInOutcomingCodeList" parameterType="map" resultType="String">
		/* 해당 재고의 모든 입출고코드 조회 */
		SELECT
			incoming_outcoming_history_code 
		FROM 
			incoming_outcoming_history
		<where>
			<if test="goodsCode != null and goodsCode != ''">
				goods_code = #{goodsCode}
			</if>
			<if test="goodsLotNumber != null and goodsLotNumber != ''">
				AND goods_lot_number = #{goodsLotNumber}
			</if>
		</where>   
	</select>
	
	<delete id="removeInOutcoming" parameterType="String">
		/* 상품입출고코드로 입출고 삭제 */
		DELETE 
		FROM 
			incoming_outcoming_history
		WHERE 
			incoming_outcoming_history_code = #{inOutcomingCode};
	</delete>
	
	<delete id="removeOutcomingDetail" parameterType="String">
		/* 상품 출고 상세 삭제 */
		DELETE 
		FROM 
			outcoming_detail
		WHERE 
			incoming_outcoming_history_code = #{inOutcomingCode};
	</delete>
	
	<select id="getInOutcomingListBySearch" resultMap="inOutcomingResultMap">
		/* 상품 입출고 검색 결과 조회 */
		SELECT 
			h.incoming_outcoming_history_code
			, h.goods_code
			, i.goods_name
			, h.goods_lot_number
			, i.goods_company
			, h.incoming_outcoming_quantity
			, h.incoming_outcoming_type
			, h.incoming_outcoming_date
			, o.outcoming_id
			, f.foundation_name
			, h.incoming_outcoming_reg_id
			, h.incoming_outcoming_reg_date
			, h.incoming_outcoming_update_id
			, h.incoming_outcoming_update_date
		FROM
			incoming_outcoming_history as h
		INNER JOIN 
			goods_reg_info AS i
		ON
			h.goods_code = i.goods_code
		LEFT JOIN
			outcoming_detail AS o
		ON 
			h.incoming_outcoming_history_code = o.incoming_outcoming_history_code
		LEFT JOIN
			foundation_list AS f
		ON
			o.foundation_code = f.foundation_code
		<where>
			<if test="inputSearchKey != null and inputSearchKey != ''">
				AND ${inputSearchKey} LIKE CONCAT('%', #{inputSearchValue}, '%')
			</if>
		    <if test="dateSearchKey != null and dateSearchKey!= '' and startDate != null and endDate != null">
		    	<choose>
		    		<when test="dateSearchKey == 'inOutcomingDate'">
				        AND h.incoming_outcoming_date BETWEEN #{startDate} AND #{endDate}
				    </when>
				    <otherwise>
				        AND 
						(
							h.incoming_outcoming_update_date IS NULL 
							AND  h.incoming_outcoming_reg_date BETWEEN #{startDate} 
							AND #{endDate}
							OR h.incoming_outcoming_update_date IS NOT NULL 
							AND h.incoming_outcoming_update_date BETWEEN #{startDate} AND #{endDate}
						)
				    </otherwise>
		    	</choose>
			</if>
		</where>	
		ORDER BY 
			CAST(SUBSTRING_INDEX(h.incoming_outcoming_history_code, 'incoming_outcoming_history', -1) AS UNSIGNED) DESC;
	</select>
	
	<select id="getInOutcomingList" resultMap="inOutcomingResultMap">
		/* 상품 입출고 조회 */
		SELECT 
			h.incoming_outcoming_history_code
			, h.goods_code
			, i.goods_name
			, h.goods_lot_number
			, i.goods_company
			, h.incoming_outcoming_quantity
			, h.incoming_outcoming_type
			, h.incoming_outcoming_date
			, o.outcoming_id
			, f.foundation_name
			, h.incoming_outcoming_reg_id
			, h.incoming_outcoming_reg_date
			, h.incoming_outcoming_update_id
			, h.incoming_outcoming_update_date
		FROM
			incoming_outcoming_history as h
		INNER JOIN 
			goods_reg_info AS i
		ON
			h.goods_code = i.goods_code
		LEFT JOIN
			outcoming_detail AS o
		ON 
			h.incoming_outcoming_history_code = o.incoming_outcoming_history_code
		LEFT JOIN
			foundation_list AS f
		ON
			o.foundation_code = f.foundation_code
		ORDER BY 
			CAST(SUBSTRING_INDEX(h.incoming_outcoming_history_code, 'incoming_outcoming_history', -1) AS UNSIGNED) DESC;
	</select>
	
</mapper>
